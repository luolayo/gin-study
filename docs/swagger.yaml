basePath: /
definitions:
  config.DatabaseConfig:
    properties:
      connMaxLifetime:
        description: ConnMaxLifetime Maximum connection lifetime
        example: 60
        type: integer
      database:
        description: Database Database name
        example: gin_study
        type: string
      host:
        description: Host Database address
        example: localhost
        type: string
      maxIdleConns:
        description: MaxIdleConns Maximum number of idle connections
        example: 10
        type: integer
      maxOpenConns:
        description: MaxOpenConns Maximum number of open connections
        example: 30
        type: integer
      password:
        description: Password Database password
        example: "123456"
        type: string
      port:
        description: Port Database port
        example: "3306"
        type: string
      username:
        description: Username Database username
        example: root
        type: string
    required:
    - connMaxLifetime
    - database
    - host
    - maxIdleConns
    - maxOpenConns
    - password
    - port
    - username
    type: object
  config.RedisConfig:
    properties:
      db:
        description: DB Which repository is it
        example: 1
        type: integer
      dialTimeout:
        description: DialTimeout redis dial timeout
        example: 10
        type: integer
      host:
        description: Host redis host
        example: localhost
        type: string
      poolSize:
        description: PoolSize redis pool size
        example: 10
        type: integer
      poolTimeout:
        description: PoolTimeout redis pool timeout
        example: 30
        type: integer
      port:
        description: Port redis port
        example: "6379"
        type: string
      readTimeout:
        description: ReadTimeout redis read timeout
        example: 30
        type: integer
      writeTimeout:
        description: WriteTimeout redis write timeout
        example: 30
        type: integer
    required:
    - db
    - dialTimeout
    - host
    - poolSize
    - poolTimeout
    - port
    - readTimeout
    - writeTimeout
    type: object
  install.AdminConfig:
    properties:
      name:
        example: admin
        type: string
      password:
        example: "123456"
        type: string
      phone:
        example: "12345678901"
        type: string
      screenName:
        example: admin
        type: string
      url:
        example: http://localhost
        type: string
    required:
    - name
    - password
    - phone
    - screenName
    - url
    type: object
  install.Step:
    properties:
      step:
        example: 1
        type: integer
    type: object
  ip.Address:
    properties:
      country:
        type: string
      ip:
        type: string
      ip_type:
        type: string
      isp:
        type: string
    type: object
  model.Group:
    enum:
    - admin
    - user
    - guest
    type: string
    x-enum-varnames:
    - GroupAdmin
    - GroupUser
    - GroupGuest
  model.User:
    properties:
      created:
        type: string
      group:
        $ref: '#/definitions/model.Group'
      ip:
        type: string
      logged:
        type: string
      name:
        type: string
      phone:
        type: string
      screenName:
        type: string
      token:
        type: string
      uid:
        type: integer
      url:
        type: string
    type: object
  res.Empty:
    type: object
  res.ErrorRes:
    properties:
      code:
        description: Return status Code
        example: 200
        type: integer
      errors:
        description: Return specific Data
        items:
          type: string
        type: array
      message:
        description: Return Message
        example: ok
        type: string
    type: object
  res.Response-array_model_User:
    properties:
      code:
        description: Return status Code
        example: 200
        type: integer
      data:
        description: Return specific Data
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        description: Return Message
        example: ok
        type: string
    type: object
  res.Response-install_Step:
    properties:
      code:
        description: Return status Code
        example: 200
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/install.Step'
        description: Return specific Data
      message:
        description: Return Message
        example: ok
        type: string
    type: object
  res.Response-ip_Address:
    properties:
      code:
        description: Return status Code
        example: 200
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/ip.Address'
        description: Return specific Data
      message:
        description: Return Message
        example: ok
        type: string
    type: object
  res.Response-model_User:
    properties:
      code:
        description: Return status Code
        example: 200
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/model.User'
        description: Return specific Data
      message:
        description: Return Message
        example: ok
        type: string
    type: object
  res.Response-res_Empty:
    properties:
      code:
        description: Return status Code
        example: 200
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/res.Empty'
        description: Return specific Data
      message:
        description: Return Message
        example: ok
        type: string
    type: object
  user.LoginDTO:
    properties:
      name:
        description: User name
        example: admin
        type: string
      password:
        description: User password
        example: "123456"
        type: string
    required:
    - name
    - password
    type: object
  user.RegisterDTO:
    properties:
      code:
        description: Verification code
        example: "123456"
        type: string
      confirmPassword:
        description: Confirm password is the same as password
        example: "123456"
        type: string
      name:
        description: User name
        example: admin
        type: string
      password:
        description: User password
        example: "123456"
        type: string
      phone:
        description: User phone number
        example: "18888888888"
        type: string
      screenName:
        description: User nickname
        example: 罗拉
        type: string
      url:
        description: User avatar
        example: https://www.luola.me
        type: string
    required:
    - code
    - confirmPassword
    - name
    - password
    - phone
    type: object
  user.UpdateDTO:
    properties:
      screenName:
        description: User nickname
        example: 罗拉
        type: string
      url:
        description: User url
        example: https://www.luola.me
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Gin study is a small project for beginners to learn by writing a blog
    built by the gin framework.
  title: Gin Study API
  version: 1.1.0
paths:
  /SMS/send:
    get:
      description: Sent verification code
      parameters:
      - description: Phone number
        example: "18888888888"
        format: "18888888888"
        in: query
        name: phone_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: SentVerificationCode
      tags:
      - SMS
  /install/check:
    get:
      description: Check which step the installation program has reached, return to
        the required steps, and if the installation is complete, return the 201 status
        code
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-install_Step'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
      summary: Check the installation step
      tags:
      - Install
  /install/step1:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Write the database configuration steps. If the database has already
        been configured, return a 201 status code
      parameters:
      - description: Database configuration
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/config.DatabaseConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: Initialize the database
      tags:
      - Install
  /install/step2:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Write the redis configuration steps. If the redis has already been
        configured, return a 201 status code
      parameters:
      - description: Reids configuration
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/config.RedisConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: Initialize the redis
      tags:
      - Install
  /install/step3:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Used to create a system administrator account, which can only have
        one and can only be created through this step during system initialization
      parameters:
      - description: Reids configuration
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/install.AdminConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: Create an admin account
      tags:
      - Install
  /test/IP:
    get:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-ip_Address'
      summary: GetIPAddredd
      tags:
      - Test
  /user/approveRegistration:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Approve user registration
      parameters:
      - description: User id
        example: "1"
        in: query
        name: cid
        required: true
        type: string
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: ApproveRegistration
      tags:
      - User
  /user/checkName:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Before registering a user, the front-end needs to check if the
        username already exists. If the username already exists, the front-end should
        prevent the use of that username to continue registration in order to reduce
        API requests.
      parameters:
      - description: Username
        example: luolayo
        format: luolayo
        in: query
        maxLength: 10
        minLength: 5
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: CheckName
      tags:
      - User
  /user/checkPhone:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Before registering a user, the front-end needs to check if the
        phone already exists. If the phone already exists, the front-end should prevent
        the use of that phone to continue registration in order to reduce API requests.
      parameters:
      - description: UserPhone
        example: "18888888888"
        in: query
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: CheckPhone
      tags:
      - User
  /user/getUserInfoById:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user information by id
      parameters:
      - description: User id
        example: "1"
        in: query
        name: uid
        required: true
        type: string
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: GetUserInfoById
      tags:
      - User
  /user/getUserList:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Due to the default registration of users as tourists, administrator
        review is required, and all users can be queried through this API
      parameters:
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page size
        example: "10"
        in: query
        name: pageSize
        type: string
      - description: Page number
        example: "1"
        in: query
        name: pageNum
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-array_model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: GetUserList
      tags:
      - User
  /user/info:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user information
      parameters:
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: GetInfo
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: User login
      parameters:
      - description: User login data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: Login
      tags:
      - User
  /user/logout:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: User logout
      parameters:
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: Logout
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: User Registration API. The user registration API is used to register
        a new user. be careful! The front-end should perform verification before requesting
        APIs, such as checking if the phone number and username already exist.
      parameters:
      - description: User registration data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: Register
      tags:
      - User
  /user/updateUserInfo:
    put:
      consumes:
      - application/x-www-form-urlencoded
      description: Update the user information API, which can partially transmit the
        information that needs to be updated, or transmit all the information that
        needs to be updated
      parameters:
      - description: User update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UpdateDTO'
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: UpdateInfo
      tags:
      - User
  /user/updateUserPassword:
    patch:
      consumes:
      - application/x-www-form-urlencoded
      description: Before users can change their password, they need to send a verification
        code, which can only be updated after successful verification
      parameters:
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: New password
        example: "123456"
        in: formData
        maxLength: 20
        minLength: 6
        name: newPassword
        required: true
        type: string
      - description: Verification code
        example: "123456"
        in: formData
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: UpdatePassword
      tags:
      - User
  /user/updateUserPhone:
    patch:
      consumes:
      - application/x-www-form-urlencoded
      description: Users need to verify the new phone number before updating their
        phone number
      parameters:
      - description: Authorization token
        example: '{{token}}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Phone number
        example: "18888888888"
        format: "18888888888"
        in: formData
        name: phone
        required: true
        type: string
      - description: Verification code
        example: "123456"
        in: formData
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response-res_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.ErrorRes'
      summary: UpdatePhone
      tags:
      - User
schemes:
- http
- https
swagger: "2.0"
