{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Gin study is a small project for beginners to learn by writing a blog built by the gin framework.",
        "title": "Gin Study API",
        "contact": {},
        "version": "1.1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/install/check": {
            "get": {
                "description": "Check which step the installation program has reached, return to the required steps, and if the installation is complete, return the 201 status code",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Install"
                ],
                "summary": "Check the installation step",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/res.Response-install_Step"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/res.Response-res_Empty"
                        }
                    }
                }
            }
        },
        "/install/step1": {
            "post": {
                "description": "Write the database configuration steps. If the database has already been configured, return a 201 status code",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Install"
                ],
                "summary": "Initialize the database",
                "parameters": [
                    {
                        "description": "Database configuration",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/config.DatabaseConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/res.Response-res_Empty"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/res.Response-res_Empty"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/res.ErrorRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/res.ErrorRes"
                        }
                    }
                }
            }
        },
        "/install/step2": {
            "post": {
                "description": "Write the redis configuration steps. If the redis has already been configured, return a 201 status code",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Install"
                ],
                "summary": "Initialize the redis",
                "parameters": [
                    {
                        "description": "Reids configuration",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/config.RedisConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/res.Response-res_Empty"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/res.Response-res_Empty"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/res.ErrorRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/res.ErrorRes"
                        }
                    }
                }
            }
        },
        "/install/step3": {
            "post": {
                "description": "Used to create a system administrator account, which can only have one and can only be created through this step during system initialization",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Install"
                ],
                "summary": "Create an admin account",
                "parameters": [
                    {
                        "description": "Reids configuration",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/install.AdminConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/res.Response-res_Empty"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/res.Response-res_Empty"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/res.ErrorRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/res.ErrorRes"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.DatabaseConfig": {
            "type": "object",
            "required": [
                "connMaxLifetime",
                "database",
                "host",
                "maxIdleConns",
                "maxOpenConns",
                "password",
                "port",
                "username"
            ],
            "properties": {
                "connMaxLifetime": {
                    "description": "ConnMaxLifetime Maximum connection lifetime",
                    "type": "integer",
                    "example": 60
                },
                "database": {
                    "description": "Database Database name",
                    "type": "string",
                    "example": "gin_study"
                },
                "host": {
                    "description": "Host Database address",
                    "type": "string",
                    "example": "localhost"
                },
                "maxIdleConns": {
                    "description": "MaxIdleConns Maximum number of idle connections",
                    "type": "integer",
                    "example": 10
                },
                "maxOpenConns": {
                    "description": "MaxOpenConns Maximum number of open connections",
                    "type": "integer",
                    "example": 30
                },
                "password": {
                    "description": "Password Database password",
                    "type": "string",
                    "example": "123456"
                },
                "port": {
                    "description": "Port Database port",
                    "type": "string",
                    "example": "3306"
                },
                "username": {
                    "description": "Username Database username",
                    "type": "string",
                    "example": "root"
                }
            }
        },
        "config.RedisConfig": {
            "type": "object",
            "required": [
                "db",
                "dialTimeout",
                "host",
                "poolSize",
                "poolTimeout",
                "port",
                "readTimeout",
                "writeTimeout"
            ],
            "properties": {
                "db": {
                    "description": "DB Which repository is it",
                    "type": "integer",
                    "example": 1
                },
                "dialTimeout": {
                    "description": "DialTimeout redis dial timeout",
                    "type": "integer",
                    "example": 10
                },
                "host": {
                    "description": "Host redis host",
                    "type": "string",
                    "example": "localhost"
                },
                "poolSize": {
                    "description": "PoolSize redis pool size",
                    "type": "integer",
                    "example": 10
                },
                "poolTimeout": {
                    "description": "PoolTimeout redis pool timeout",
                    "type": "integer",
                    "example": 30
                },
                "port": {
                    "description": "Port redis port",
                    "type": "string",
                    "example": "6379"
                },
                "readTimeout": {
                    "description": "ReadTimeout redis read timeout",
                    "type": "integer",
                    "example": 30
                },
                "writeTimeout": {
                    "description": "WriteTimeout redis write timeout",
                    "type": "integer",
                    "example": 30
                }
            }
        },
        "install.AdminConfig": {
            "type": "object",
            "required": [
                "name",
                "password",
                "phone",
                "screenName",
                "url"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "phone": {
                    "type": "string",
                    "example": "12345678901"
                },
                "screenName": {
                    "type": "string",
                    "example": "admin"
                },
                "url": {
                    "type": "string",
                    "example": "http://localhost"
                }
            }
        },
        "install.Step": {
            "type": "object",
            "properties": {
                "step": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "res.Empty": {
            "type": "object"
        },
        "res.ErrorRes": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Return status Code",
                    "type": "integer",
                    "example": 200
                },
                "errors": {
                    "description": "Return specific Data",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Return Message",
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "res.Response-install_Step": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Return status Code",
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "description": "Return specific Data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/install.Step"
                        }
                    ]
                },
                "message": {
                    "description": "Return Message",
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "res.Response-res_Empty": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Return status Code",
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "description": "Return specific Data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/res.Empty"
                        }
                    ]
                },
                "message": {
                    "description": "Return Message",
                    "type": "string",
                    "example": "ok"
                }
            }
        }
    }
}